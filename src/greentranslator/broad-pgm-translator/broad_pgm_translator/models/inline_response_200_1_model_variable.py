# coding: utf-8

"""
    Broad probabilistic graphical models translator

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.0.1
    Contact: translator@broadinstitute.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse2001ModelVariable(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, variable_id=None, authority_uri=None, variable_type=None, variable_value=None):
        """
        InlineResponse2001ModelVariable - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'variable_id': 'str',
            'authority_uri': 'str',
            'variable_type': 'str',
            'variable_value': 'list[str]'
        }

        self.attribute_map = {
            'variable_id': 'variableID',
            'authority_uri': 'authorityURI',
            'variable_type': 'variableType',
            'variable_value': 'variableValue'
        }

        self._variable_id = variable_id
        self._authority_uri = authority_uri
        self._variable_type = variable_type
        self._variable_value = variable_value


    @property
    def variable_id(self):
        """
        Gets the variable_id of this InlineResponse2001ModelVariable.


        :return: The variable_id of this InlineResponse2001ModelVariable.
        :rtype: str
        """
        return self._variable_id

    @variable_id.setter
    def variable_id(self, variable_id):
        """
        Sets the variable_id of this InlineResponse2001ModelVariable.


        :param variable_id: The variable_id of this InlineResponse2001ModelVariable.
        :type: str
        """

        self._variable_id = variable_id

    @property
    def authority_uri(self):
        """
        Gets the authority_uri of this InlineResponse2001ModelVariable.


        :return: The authority_uri of this InlineResponse2001ModelVariable.
        :rtype: str
        """
        return self._authority_uri

    @authority_uri.setter
    def authority_uri(self, authority_uri):
        """
        Sets the authority_uri of this InlineResponse2001ModelVariable.


        :param authority_uri: The authority_uri of this InlineResponse2001ModelVariable.
        :type: str
        """

        self._authority_uri = authority_uri

    @property
    def variable_type(self):
        """
        Gets the variable_type of this InlineResponse2001ModelVariable.


        :return: The variable_type of this InlineResponse2001ModelVariable.
        :rtype: str
        """
        return self._variable_type

    @variable_type.setter
    def variable_type(self, variable_type):
        """
        Sets the variable_type of this InlineResponse2001ModelVariable.


        :param variable_type: The variable_type of this InlineResponse2001ModelVariable.
        :type: str
        """
        allowed_values = ["Bollean", "Number", "String"]
        if variable_type not in allowed_values:
            raise ValueError(
                "Invalid value for `variable_type` ({0}), must be one of {1}"
                .format(variable_type, allowed_values)
            )

        self._variable_type = variable_type

    @property
    def variable_value(self):
        """
        Gets the variable_value of this InlineResponse2001ModelVariable.


        :return: The variable_value of this InlineResponse2001ModelVariable.
        :rtype: list[str]
        """
        return self._variable_value

    @variable_value.setter
    def variable_value(self, variable_value):
        """
        Sets the variable_value of this InlineResponse2001ModelVariable.


        :param variable_value: The variable_value of this InlineResponse2001ModelVariable.
        :type: list[str]
        """

        self._variable_value = variable_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
