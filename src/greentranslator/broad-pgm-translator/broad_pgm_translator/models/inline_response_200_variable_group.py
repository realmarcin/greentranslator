# coding: utf-8

"""
    Broad probabilistic graphical models translator

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.0.1
    Contact: translator@broadinstitute.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse200VariableGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, group_value=None, variable_group_id=None, group_type=None, as_output=None, as_input=None, authority_url=None):
        """
        InlineResponse200VariableGroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'group_value': 'list[str]',
            'variable_group_id': 'str',
            'group_type': 'str',
            'as_output': 'bool',
            'as_input': 'bool',
            'authority_url': 'str'
        }

        self.attribute_map = {
            'group_value': 'groupValue',
            'variable_group_id': 'variableGroupID',
            'group_type': 'groupType',
            'as_output': 'asOutput',
            'as_input': 'asInput',
            'authority_url': 'authorityURL'
        }

        self._group_value = group_value
        self._variable_group_id = variable_group_id
        self._group_type = group_type
        self._as_output = as_output
        self._as_input = as_input
        self._authority_url = authority_url


    @property
    def group_value(self):
        """
        Gets the group_value of this InlineResponse200VariableGroup.


        :return: The group_value of this InlineResponse200VariableGroup.
        :rtype: list[str]
        """
        return self._group_value

    @group_value.setter
    def group_value(self, group_value):
        """
        Sets the group_value of this InlineResponse200VariableGroup.


        :param group_value: The group_value of this InlineResponse200VariableGroup.
        :type: list[str]
        """

        self._group_value = group_value

    @property
    def variable_group_id(self):
        """
        Gets the variable_group_id of this InlineResponse200VariableGroup.


        :return: The variable_group_id of this InlineResponse200VariableGroup.
        :rtype: str
        """
        return self._variable_group_id

    @variable_group_id.setter
    def variable_group_id(self, variable_group_id):
        """
        Sets the variable_group_id of this InlineResponse200VariableGroup.


        :param variable_group_id: The variable_group_id of this InlineResponse200VariableGroup.
        :type: str
        """

        self._variable_group_id = variable_group_id

    @property
    def group_type(self):
        """
        Gets the group_type of this InlineResponse200VariableGroup.


        :return: The group_type of this InlineResponse200VariableGroup.
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """
        Sets the group_type of this InlineResponse200VariableGroup.


        :param group_type: The group_type of this InlineResponse200VariableGroup.
        :type: str
        """
        allowed_values = ["Bollean", "Number", "String"]
        if group_type not in allowed_values:
            raise ValueError(
                "Invalid value for `group_type` ({0}), must be one of {1}"
                .format(group_type, allowed_values)
            )

        self._group_type = group_type

    @property
    def as_output(self):
        """
        Gets the as_output of this InlineResponse200VariableGroup.


        :return: The as_output of this InlineResponse200VariableGroup.
        :rtype: bool
        """
        return self._as_output

    @as_output.setter
    def as_output(self, as_output):
        """
        Sets the as_output of this InlineResponse200VariableGroup.


        :param as_output: The as_output of this InlineResponse200VariableGroup.
        :type: bool
        """

        self._as_output = as_output

    @property
    def as_input(self):
        """
        Gets the as_input of this InlineResponse200VariableGroup.


        :return: The as_input of this InlineResponse200VariableGroup.
        :rtype: bool
        """
        return self._as_input

    @as_input.setter
    def as_input(self, as_input):
        """
        Sets the as_input of this InlineResponse200VariableGroup.


        :param as_input: The as_input of this InlineResponse200VariableGroup.
        :type: bool
        """

        self._as_input = as_input

    @property
    def authority_url(self):
        """
        Gets the authority_url of this InlineResponse200VariableGroup.


        :return: The authority_url of this InlineResponse200VariableGroup.
        :rtype: str
        """
        return self._authority_url

    @authority_url.setter
    def authority_url(self, authority_url):
        """
        Sets the authority_url of this InlineResponse200VariableGroup.


        :param authority_url: The authority_url of this InlineResponse200VariableGroup.
        :type: str
        """

        self._authority_url = authority_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
